{
  
    
        "post0": {
            "title": "기계학습특강",
            "content": "# 우리의 2차 목표: 그 모형에 &quot;새로운&quot; 자료를 전달하여 이미지를 분류할 것이다. (즉 클래시파이어를 쓴다는 소리) . from fastai.vision.all import * . path=untar_data(URLs.PETS)/&#39;images&#39; . . 100.00% [811712512/811706944 01:16&lt;00:00] path . Path(&#39;/root/.fastai/data/oxford-iiit-pet/images&#39;) . PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39;) . _lst = &#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39;,&#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_10.jpg&#39; . _lst[0] . &#39;/root/.fastai/data/oxford-iiit-pet/images/Abyssinian_1.jpg&#39; . faaaa = get_image_files(path) #교수님은 filenames로 설정함 . faaaa[0] . Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/leonberger_137.jpg&#39;) . PILImage.create(&#39;/root/.fastai/data/oxford-iiit-pet/images/newfoundland_28.jpg&#39;) . PILImage.create(faaaa[0]) . print(faaaa[1]) PILImage.create(faaaa[1]) . /root/.fastai/data/oxford-iiit-pet/images/Birman_139.jpg . print(faaaa[3]) PILImage.create(faaaa[3]) . /root/.fastai/data/oxford-iiit-pet/images/Egyptian_Mau_148.jpg . print(faaaa[6]) PILImage.create(faaaa[6]) . /root/.fastai/data/oxford-iiit-pet/images/Siamese_79.jpg . &#39;A&#39;.isupper() . True . &#39;abdjlkfwe.jpg&#39;[0] . &#39;a&#39; . def f(fname): if fname[0].isupper(): return &#39;cat&#39; else: return &#39;dog&#39; . dls = ImageDataLoaders.from_name_func(path,faaaa,f,item_tfms=Resize(224)) . dls.show_batch(max_n=25) . # 우리의 2차 목표: 그 모형에 &quot;새로운&quot; 자료를 전달하여 이미지를 분류할 것이다. (즉 클래시파이어를 쓴다는 소리) ## 오브젝트.. 오브젝트에는 동사와 명사 가 있어요 ### 명사 # (1) 데이터 # (2) 채용한 모형의 이론 # (3) 평가기준 matric ### 동사 # (1) 학습 # (2) 판단 . ysj = cnn_learner(dls,resnet34,metrics=error_rate) ##저항률 확인(잘 파악하는지 확인하기 위해서 metrics=error_rate 이용) ysj.fine_tune(1) ## 3을 쓰면 1보다는 많이 한다는 뜻 ## 학습하다..동사,, . /usr/local/lib/python3.7/dist-packages/fastai/vision/learner.py:284: UserWarning: `cnn_learner` has been renamed to `vision_learner` -- please update your code warn(&#34;`cnn_learner` has been renamed to `vision_learner` -- please update your code&#34;) /usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter &#39;pretrained&#39; is deprecated since 0.13 and will be removed in 0.15, please use &#39;weights&#39; instead. f&#34;The parameter &#39;{pretrained_param}&#39; is deprecated since 0.13 and will be removed in 0.15, &#34; /usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for &#39;weights&#39; are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet34_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet34_Weights.DEFAULT` to get the most up-to-date weights. warnings.warn(msg) Downloading: &#34;https://download.pytorch.org/models/resnet34-b627a593.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet34-b627a593.pth . epoch train_loss valid_loss error_rate time . 0 | 0.147350 | 0.014042 | 0.004060 | 00:56 | . epoch train_loss valid_loss error_rate time . 0 | 0.053051 | 0.012090 | 0.004736 | 00:52 | . ?cnn_learner . PILImage.create(faaaa[1]) . ysj.predict(PILImage.create(faaaa[1])) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 3.0773e-10])) . ysj.predict(PILImage.create(faaaa[6])) . &#46041;&#49324;&#51060;&#44256;.. &#46244;&#50640; &#51216;&#52237;&#50632;&#51004;&#45768;&#44620; &#54632;&#49688;&#45796; &#49373;&#44033;&#54616;&#44592; . &#51077;&#47141;&#51012; &#51060;&#48120;&#51648; &#51088;&#52404;&#47196; &#45347;&#50632;&#45716;&#45936;, &#51060;&#48120;&#51648;&#44032; &#51200;&#51109;&#46108; path&#47564; &#45347;&#50612;&#46020; &#46104;&#51648;&#50506;&#51012;&#44620;? . ysj.predict(faaaa[6]) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 2.2963e-10])) . ysj.show_results() . # 체크를 하는 object를 만들어야함 checker = Interpretation.from_learner(ysj) . checker.plot_top_losses(16) # 첫번째 사진에서 5.59는 로스이고 1퍼의 확률로 강아지라고 생각함 # 로스는 몇퍼의 확률로 잘못생각했느냐에 따라서 달라질 수 있음 # 맞추는 걸 넘어서 확실해야 로스가 적다. (확신의여부) # 오버피팅 아냐..? 과대적합..? 자기들이 이미 다학습된 내용 가지고 보여주는거아냐? 생각-&gt;새로운 이미지 부여 . img=PILImage.create(requests.get(&#39;https://dimg.donga.com/ugc/CDB/SHINDONGA/Article/5e/0d/9f/01/5e0d9f011a9ad2738de6.jpg&#39;).content) ysj.predict(img) . (&#39;dog&#39;, TensorBase(1), TensorBase([2.8106e-06, 1.0000e+00])) . img=PILImage.create(requests.get(&#39;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcnSq1X%2Fbtq4o9AdWTH%2FHTm9TZG4AszSwLPFlVfGW0%2Fimg.jpg&#39;).content) ysj.predict(img) . (&#39;dog&#39;, TensorBase(1), TensorBase([1.0909e-06, 1.0000e+00])) . img=PILImage.create(requests.get(&#39;https://image.edaily.co.kr/images/photo/files/NP/S/2022/04/PS22042501396.jpg&#39;).content) ysj.predict(img) . (&#39;cat&#39;, TensorBase(0), TensorBase([1.0000e+00, 2.6542e-12])) . img=PILImage.create(requests.get(&#39;https://blog.kakaocdn.net/dn/zfQQi/btrydI0vGzm/3YY3KrPEwKN558e27H6t0k/img.jpg&#39;).content) ysj.predict(img) . (&#39;cat&#39;, TensorBase(0), TensorBase([0.9805, 0.0195])) . PILImage.create(&#39;/강아지사진1.jpg&#39;) .",
            "url": "https://boram-coco.github.io/coco1/2022/09/07/ML.html",
            "relUrl": "/2022/09/07/ML.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://boram-coco.github.io/coco1/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://boram-coco.github.io/coco1/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "about me에 대한 관련된 내용 작성 . 프로젝트(수업들으면서 했던 프로젝트를 쓰든지,,) . 신기하다 ㅇ와 . 시계열분석을 활용한 삼ㅈ성전자 주식예측(2022-05) . 이런식으로… . 프로그래밍 스킬 ( R 파이썬 .. ) .",
          "url": "https://boram-coco.github.io/coco1/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://boram-coco.github.io/coco1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}